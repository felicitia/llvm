*** /dev/null
--- /dev/null
***************
*** 616
-                                llvm::omp::OMPD_parallel, StartLoc, EndLoc) {}
--- 616 -----
+                                llvm::omp::OMPD_nmr, StartLoc, EndLoc) {}
***************
*** 622
-                                llvm::omp::OMPD_parallel, SourceLocation(),
--- 622 -----
+                                llvm::omp::OMPD_nmr, SourceLocation(),
***************
*** 2904
-       : OMPExecutableDirective(OMPVoteDirectiveClass, llvm::omp::OMPD_dkflush,
--- 2904 -----
+       : OMPExecutableDirective(OMPVoteDirectiveClass, llvm::omp::OMPD_vote,
***************
*** 2910
-       : OMPExecutableDirective(OMPVoteDirectiveClass, llvm::omp::OMPD_dkflush,
--- 2910 -----
+       : OMPExecutableDirective(OMPVoteDirectiveClass, llvm::omp::OMPD_vote,
*** /dev/null
--- /dev/null
***************
*** 0
--- 3326,3327 -----
+   OMPClause *ParseFTDoubleVarListClause(OpenMPDirectiveKind DKind,
+                                       OpenMPClauseKind Kind, bool ParseOnly);
*** /dev/null
--- /dev/null
***************
*** 0
--- 10795,10798 -----
+   StmtResult ActOnFTExecutableDirective(
+       OpenMPDirectiveKind Kind, const DeclarationNameInfo &DirName,
+       ArrayRef<OMPClause *> Clauses,
+       Stmt *AStmt, SourceLocation StartLoc, SourceLocation EndLoc);
*** /dev/null
--- /dev/null
***************
*** 657
-   case OMPD_vote:
--- 657 -----
+ //  case OMPD_vote:
*** /dev/null
--- /dev/null
***************
*** 1581,1592
- #if 0
-      bool generate_code_before = false;
-      bool generate_code_after = false;
-      if (S == nullptr) 
-          CGF.CGM.getOpenMPRuntime().emitFTVoteClause(CGF, Varaddr, TSize, Loc);
-      else {
-        if (generate_code_after == true) CGF.EmitStmt(S);
-        CGF.CGM.getOpenMPRuntime().emitFTVoteClause(CGF, Varaddr, TSize, S->getBeginLoc());
-        if (generate_code_before == true) CGF.EmitStmt(S);
-        if (generate_code_before == false && generate_code_after == false) CGF.EmitStmt(S);
-     }
- #endif
--- 0 -----
***************
*** 1603,1604
-         TVarsSizes.push_back(RVarsSizes[i*2]);
-         TVarsSizes.push_back(RVarsSizes[i*2+1]);
--- 1591,1592 -----
+         TVarsSizes.push_back(RVarsSizes[RVarsNameIndex[i]]);
+         TVarsSizes.push_back(RVarsSizes[RVarsNameIndex[i]+1]);
***************
*** 1612,1613
-         TVarsSizes.push_back(LVarsSizes[i*2]);
-         TVarsSizes.push_back(LVarsSizes[i*2+1]);
--- 1600,1601 -----
+         TVarsSizes.push_back(LVarsSizes[RVarsNameIndex[i]]);
+         TVarsSizes.push_back(LVarsSizes[RVarsNameIndex[i]+1]);
*** /dev/null
--- /dev/null
***************
*** 2014
-         if (Tok.isOneOf(tok::annot_pragma_openmp, tok::annot_attr_openmp))
--- 2014 -----
+         if (Tok.isOneOf(tok::annot_pragma_ft, tok::annot_attr_ft))
***************
*** 2016
-         else if (Tok.is(tok::annot_pragma_openmp_end))
--- 2016 -----
+         else if (Tok.is(tok::annot_pragma_ft_end))
***************
*** 2058
-       if (Tok.isNot(tok::annot_pragma_openmp_end)) {
--- 2058 -----
+       if (Tok.isNot(tok::annot_pragma_ft_end)) {
***************
*** 2062
-         while (Tok.isNot(tok::annot_pragma_openmp_end)) {
--- 2062 -----
+         while (Tok.isNot(tok::annot_pragma_ft_end)) {
***************
*** 2069
-           SkipUntil(tok::comma, tok::identifier, tok::annot_pragma_openmp_end,
--- 2069 -----
+           SkipUntil(tok::comma, tok::identifier, tok::annot_pragma_ft_end,
***************
*** 2074
-           if (Tok.is(tok::annot_pragma_openmp_end)) {
--- 2074 -----
+           if (Tok.is(tok::annot_pragma_ft_end)) {
***************
*** 2098
-     if (Tok.is(tok::annot_pragma_openmp_end)) {
--- 2098 -----
+     if (Tok.is(tok::annot_pragma_ft_end)) {
***************
*** 2103
-     while (Tok.isNot(tok::annot_pragma_openmp_end)) {
--- 2103 -----
+     while (Tok.isNot(tok::annot_pragma_ft_end)) {
***************
*** 2110
-       SkipUntil(tok::comma, tok::identifier, tok::annot_pragma_openmp_end,
--- 2110 -----
+       SkipUntil(tok::comma, tok::identifier, tok::annot_pragma_ft_end,
***************
*** 2115
-       if (Tok.is(tok::annot_pragma_openmp_end)) {
--- 2115 -----
+       if (Tok.is(tok::annot_pragma_ft_end)) {
***************
*** 2170
-       while (!SkipUntil(tok::annot_pragma_openmp_end, Parser::StopBeforeMatch))
--- 2170 -----
+       while (!SkipUntil(tok::annot_pragma_ft_end, Parser::StopBeforeMatch))
***************
*** 2240
-     while (Tok.isNot(tok::annot_pragma_openmp_end)) {
--- 2240 -----
+     while (Tok.isNot(tok::annot_pragma_ft_end)) {
***************
*** 2248
-     if (Tok.isOneOf(tok::annot_pragma_openmp, tok::annot_attr_openmp)) {
--- 2248 -----
+     if (Tok.isOneOf(tok::annot_pragma_ft, tok::annot_attr_ft)) {
***************
*** 2278
-     bool HasClauses = Tok.isNot(tok::annot_pragma_openmp_end);
--- 2278 -----
+     bool HasClauses = Tok.isNot(tok::annot_pragma_ft_end);
***************
*** 2324
-   case OMPD_dkflush:
--- 0 -----
***************
*** 2388
-   while (Tok.isNot(tok::annot_pragma_openmp_end))
--- 2387 -----
+   while (Tok.isNot(tok::annot_pragma_ft_end))
***************
*** 2758
-   case OMPD_dkflush:
--- 0 -----
***************
*** 2850,2851
-   Token Tok = getCurToken();
-   StringRef S = getPreprocessor().getSpelling(Tok);
--- 2848,2849 -----
+   Token _Tok = getCurToken();
+   StringRef S = getPreprocessor().getSpelling(_Tok);
***************
*** 2856
-    ConsumeToken();
--- 0 -----
***************
*** 2860
-     HasAssociatedStatement = false;
--- 0 -----
***************
*** 0
--- 2858,2862 -----
+     if (DKind == OMPD_vote) {
+       HasAssociatedStatement = false;
+       ImplicitTok = Tok;
+     }
+     else HasAssociatedStatement = true;
***************
*** 2865,2866
- //    Actions.StartOpenMPDSABlock(DKind, DirName, Actions.getCurScope(), Loc);
-     while (Tok.isNot(tok::annot_pragma_openmp_end)) {
--- 2866,2867 -----
+     Actions.StartOpenMPDSABlock(DKind, DirName, Actions.getCurScope(), Loc);
+     while (Tok.isNot(tok::annot_pragma_ft_end)) {
***************
*** 2870
-         while (Tok.isNot(tok::annot_pragma_openmp_end))
--- 2871 -----
+         while (Tok.isNot(tok::annot_pragma_ft_end))
***************
*** 2916,2928
-       // The body is a block scope like in Lambdas and Blocks.
- //      Actions.ActOnOpenMPRegionStart(DKind, getCurScope());
-       // FIXME: We create a bogus CompoundStmt scope to hold the contents of
-       // the captured region. Code elsewhere assumes that any FunctionScopeInfo
-       // should have at least one compound statement scope within it.
-       ParsingOpenMPDirectiveRAII NormalScope(*this, /*Value=*/false);
-       {
-         Sema::CompoundScopeRAII Scope(Actions);
-         AssociatedStmt = ParseStatement();
- 
-         if (AssociatedStmt.isUsable() /* && isOpenMPLoopDirective(DKind) &&
-             getLangOpts().OpenMPIRBuilder */)
-           AssociatedStmt = Actions.ActOnOpenMPLoopnest(AssociatedStmt.get());
--- 2917,2922 -----
+       if (DKind == OMPD_nmr) {
+         ParsingOpenMPDirectiveRAII NormalScope(*this, /*Value=*/false);
+         {
+           Sema::CompoundScopeRAII Scope(Actions);
+           AssociatedStmt = ParseStatement();	// DK: here associated statements are parsed
+ 	}
***************
*** 2930
-       AssociatedStmt = Actions.ActOnOpenMPRegionEnd(AssociatedStmt, Clauses);
--- 2924 -----
+ //      AssociatedStmt = Actions.ActOnOpenMPRegionEnd(AssociatedStmt, Clauses);
***************
*** 2932
-     /*
--- 0 -----
***************
*** 2939
-     */
--- 0 -----
***************
*** 0
--- 2935 -----
+   return Directive;
***************
*** 3243,3245
- // #ifdef DK
-   case OMPD_dkflush:
- // #endif
--- 0 -----
***************
*** 3323,3327
- // ifdef DK
-     if (DKind == OMPD_flush || DKind == OMPD_dkflush || DKind == OMPD_depobj || DKind == OMPD_vote) {
- // else
- //    if (DKind == OMPD_flush || DKind == OMPD_depobj) {
- // endif
--- 3313 -----
+     if (DKind == OMPD_flush || DKind == OMPD_depobj || DKind == OMPD_vote) {
***************
*** 3385,3387
- 	else if (DKind == OMPD_dkflush) {
-           CKind = OMPC_dkflush;
-         } 
--- 0 -----
***************
*** 3651,3652
-     OMPC_vote:	/* LVALUE */
-         Clause = ParseOpenMPDoubleVarListClause(DKind, CKind, WrongDirective);
--- 3634,3635 -----
+     case OMPC_vote:	/* vote now */
+         Clause = ParseFTDoubleVarListClause(DKind, CKind, WrongDirective);
***************
*** 3654,3655
-     OMPC_var:	/* LVALUE */
-         Clause = ParseOpenMPDoubleVarListClause(DKind, CKind, WrongDirective);
--- 3637,3638 -----
+     case OMPC_var:	/* LVALUE */
+         Clause = ParseFTDoubleVarListClause(DKind, CKind, WrongDirective);
***************
*** 3657,3658
-     OMPC_rvar:	/* RVALUE */
-         Clause = ParseOpenMPDoubleVarListClause(DKind, CKind, WrongDirective);
--- 3640,3641 -----
+     case OMPC_rvar:	/* RVALUE */
+         Clause = ParseFTDoubleVarListClause(DKind, CKind, WrongDirective);
***************
*** 3660
-     OMPC_degree:	/* degree of NMR */
--- 3643 -----
+     case OMPC_degree:	/* TODO: degree of NMR */
***************
*** 3869,3871
- // #ifdef DK
-   case OMPC_dkflush:
- // #endif
--- 0 -----
***************
*** 5076
- 			  // ifdef DK	- without this, dkflush cannot have argument 
--- 5056 -----
+ 			  // ifdef DK	without this, vote cannot have argument 
***************
*** 5078,5079
- 			: ((Kind == OMPC_dkflush) ? getOpenMPDirectiveName(OMPD_dkflush) 
- 			           : ((Kind == OMPC_vote) ? getOpenMPDirectiveName(OMPD_vote) : getOpenMPClauseName(Kind))))
--- 5058 -----
+ 			           : ((Kind == OMPC_vote) ? getOpenMPDirectiveName(OMPD_vote) : getOpenMPClauseName(Kind)))
***************
*** 0
--- 5176,5255 -----
+ OMPClause *Parser::ParseFTDoubleVarListClause(OpenMPDirectiveKind DKind,
+                                             OpenMPClauseKind Kind,
+                                             bool ParseOnly) {
+   SourceLocation Loc = Tok.getLocation();
+   SourceLocation LOpen = ConsumeToken();
+   SmallVector<Expr *, 4> Vars;
+   SmallVector<Expr *, 4> Sizes;
+   OpenMPVarListDataTy Data;
+   OpenMPVarListDataTy DataSizes;
+ 
+   bool IsComma = true;
+   BalancedDelimiterTracker T(*this, tok::l_paren, tok::annot_pragma_ft_end);
+   if (T.expectAndConsume(diag::err_expected_lparen_after,
+                          getOpenMPClauseName(Kind).data()))
+     return nullptr;
+ 
+   while (Tok.isNot(tok::r_paren) /* && Tok.isNot(tok::colon) */ &&
+                      Tok.isNot(tok::annot_pragma_ft_end)) {
+     ParseScope OMPListScope(this, Scope::OpenMPDirectiveScope);
+     ColonProtectionRAIIObject ColonRAII(*this);
+     // Parse variable
+     ExprResult VarExpr =
+         Actions.CorrectDelayedTyposInExpr(ParseAssignmentExpression());
+     if (VarExpr.isUsable()) {
+       Vars.push_back(VarExpr.get());
+     } else {
+       SkipUntil(tok::comma, tok::r_paren, tok::annot_pragma_ft_end,
+                 StopBeforeMatch);
+     }
+     // Skip ',' if any
+     bool IsColon = Tok.is(tok::colon);
+     IsComma = Tok.is(tok::comma);
+     if (IsColon) {  // size is specified explicitly
+       DataSizes.ColonLoc = ConsumeToken();	// DK: we may not need this. It is overwritten anyway
+       // Parse variable
+       SourceLocation ELoc = Tok.getLocation();
+       ExprResult LHS(
+           ParseCastExpression(AnyCastExpr, false, NotTypeCast));
+       ExprResult Val(ParseRHSOfBinaryExpression(LHS, prec::Conditional));
+       Val = Actions.ActOnFinishFullExpr(Val.get(), ELoc, /*DiscardedValue*/ false);
+       // Parse variable
+       if (Val.isInvalid()) {
+         return nullptr;
+       } else {
+         Sizes.push_back(Val.get());
+         SkipUntil(tok::comma, tok::r_paren, tok::annot_pragma_ft_end,
+                   StopBeforeMatch);
+       }
+       IsComma = Tok.is(tok::comma);
+     }  else { // use default value or size of the variable
+         Sizes.push_back(nullptr);
+     }
+     if (IsComma)
+       ConsumeToken();
+   }
+ 
+   // Parse ')'.
+   Data.RLoc = Tok.getLocation();
+   if (!T.consumeClose())
+     Data.RLoc = T.getCloseLocation();
+ 
+   if (ParseOnly)
+     return nullptr;
+   OMPVarListLocTy Locs(Loc, LOpen, Data.RLoc);
+   SourceLocation StartLoc = Locs.StartLoc;
+   SourceLocation LParenLoc = Locs.LParenLoc;
+   SourceLocation EndLoc = Locs.EndLoc;
+   return Actions.ActOnOpenMPVarSizeListClause(
+       Kind, Vars, Sizes, StartLoc, LParenLoc, EndLoc);
+  /* 
+   Data.DepModOrTailExpr, Locs, 
+       
+       Data.ColonLoc,
+       Data.ReductionOrMapperIdScopeSpec, Data.ReductionOrMapperId,
+       Data.ExtraModifier, Data.MapTypeModifiers, Data.MapTypeModifiersLoc,
+       Data.IsMapTypeImplicit, Data.ExtraModifierLoc, Data.MotionModifiers,
+       Data.MotionModifiersLoc);
+ */
+ }
+ 
*** /dev/null
--- /dev/null
***************
*** 8909
-   getDerived().getSema().StartOpenMPDSABlock(OMPD_dkflush, DirName, nullptr,
--- 8909 -----
+   getDerived().getSema().StartOpenMPDSABlock(OMPD_vote, DirName, nullptr,
